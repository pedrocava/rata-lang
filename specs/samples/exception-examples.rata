module "ExceptionExamples" {
  
  result1 = try {
    
    if Stats.runif() > .5 {
      raise Core.runtime_error("Something went wrong")
    } else {
      raise Core.value_error("Oopsie")
    }
  
  } catch as error {
    :runtime_error -> Log.info(f"Caught runtime error: {error}")
    :value_error -> Log.info(f"Value error: {error}")
  }

  result2 = try {
    x = 10 / 0
  } catch {
    :division_by_zero -> "Cannot divide by zero"
  } after {
    Log.debug("The {after} clause only runs after an error!")
  }

  result3 = try {
    value = 42
    return value
  } catch {
    _ -> "Error occurred"
  } else {
    Log.debug("No exception occurred")
  }

  result4 = try {
    raise Core.argument_error("Invalid argument")
  } catch {
    {:argument_error, msg} -> f"Argument error: {msg}"
    {:runtime_error, msg} -> f"Runtime error: {msg}"
    other -> f"Other error: {other}"
  }

  custom_exception = function() {
    raise Core.exception(:my_custom_error, "This is a custom error")
  }

  handle_and_reraise = function(operation) {
    try {
      operation()
    } catch {
      error -> {
        Core.debug(f"Logging error: {error}")
        reraise error
      }
    }
  }

  nested_example = try {
    try {
      raise Core.type_error("Inner error")
    } catch {
      :runtime_error -> "Won't match"
    }
  } catch {
    :type_error -> "Caught from inner try"
  }

  guarded_catch = try {
    raise Core.runtime_error("Test message")
  } catch {
    {:runtime_error, msg} when msg == "Test message" -> "Exact match"
    {:runtime_error, msg} -> f"Other runtime error: {msg}"
  }

}

module BirdCount {
  today = function(counts: [int]) {
    if List.is_empty(counts) {
      return nil
    } else {
      return List.first(counts)
    }
  }

  increment_day_count = function(counts: [int]) {
    if List.is_empty(counts) {
      return 1
    } else {
      today_count = List.first(counts)
      rest_counts = List.rest(counts)
      return List.prepend(rest_counts, today_count + 1)
    }
  }
  
  has_day_without_birds = function(counts: [int]) {
    return Enum.some(counts, ~ .x == 0)
  }
  
  total = function(counts: [int]) {
    return Enum.sum(counts)
  }
  
  busy_days = function(counts: [int]) {
    return counts 
      |> Enum.keep(~ .x >= 5)
      |> List.length()
  }
}

# Track daily bird visits: [today, yesterday, day_before, ...]
daily_counts = [2, 5, 0, 7, 4, 1]
updated_counts = BirdCount.increment_day_count(daily_counts)

Log.info(f"Today's count: {BirdCount.today(daily_counts)}")
Log.info(f"After increment: {BirdCount.today(updated_counts)}")
Log.info(f"Total birds: {BirdCount.total(daily_counts)}")
Log.info(f"Busy days: {BirdCount.busy_days(daily_counts)}")
